# Multi-stage build for production on ARM architecture (Raspberry Pi)
FROM python:3.12-slim AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    python3-dev \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
WORKDIR /tmp
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Production stage
FROM python:3.12-slim

# Install runtime dependencies including supervisor and redis-cli
RUN apt-get update && apt-get install -y \
    libpq-dev \
    netcat-openbsd \
    supervisor \
    redis-tools \
    && rm -rf /var/lib/apt/lists/*

# Copy Python dependencies from builder
COPY --from=builder /root/.local /root/.local

# Make sure scripts in .local are usable
ENV PATH=/root/.local/bin:$PATH

# Set working directory
WORKDIR /code

# Copy project files
COPY . /code/

# Copy supervisor configuration
COPY supervisor.conf /etc/supervisor/conf.d/urban-espionage.conf

# Create static and media directories and log directories
RUN mkdir -p /code/static /code/media /var/log/supervisor

# Add wait script for database
RUN echo '#!/bin/sh\n\
while ! nc -z db 5432; do\n\
  echo "Waiting for database..."\n\
  sleep 1\n\
done\n\
echo "Database is ready!"\n\
exec "$@"' > /wait-for-db.sh && chmod +x /wait-for-db.sh

# Collect static files (done at runtime in docker-compose)
# RUN python manage.py collectstatic --noinput

# Expose ports
EXPOSE 8000 8001

# Set entrypoint
ENTRYPOINT ["/wait-for-db.sh"]

# Default command - use supervisor to run both servers
# Can be overridden by docker-compose for different deployment strategies
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]