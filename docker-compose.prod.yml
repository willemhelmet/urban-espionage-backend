version: '3.8'

services:
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: urban_espionage
      POSTGRES_USER: ${DB_USER:-urban_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - urban_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-urban_user} -d urban_espionage"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - urban_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: always
    command: >
      sh -c "
        python manage.py collectstatic --noinput &&
        python manage.py migrate &&
        gunicorn examplesite.wsgi:application --bind 0.0.0.0:8000 --workers 2
      "
    volumes:
      - static_volume:/code/static
      - media_volume:/code/media
    expose:
      - 8000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://${DB_USER:-urban_user}:${DB_PASSWORD}@db:5432/urban_espionage
      REDIS_HOST: redis
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DEBUG: "False"
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
    networks:
      - urban_network

  daphne:
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: always
    command: daphne -b 0.0.0.0 -p 8001 examplesite.asgi:application
    expose:
      - 8001
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://${DB_USER:-urban_user}:${DB_PASSWORD}@db:5432/urban_espionage
      REDIS_HOST: redis
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DEBUG: "False"
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
    networks:
      - urban_network

  nginx:
    image: nginx:alpine
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/static
      - media_volume:/media
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
      - daphne
    networks:
      - urban_network

networks:
  urban_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume: