# Generated by Django 5.0.11 on 2025-09-02 16:19

import core.models
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DeployedItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('item_type', models.CharField(choices=[('emp', 'EMP'), ('camera', 'Camera'), ('time_bomb', 'Time Bomb'), ('land_mine', 'Land Mine'), ('dagger', 'Dagger'), ('mask', 'Mask'), ('armor', 'Armor'), ('invisibility_cloak', 'Invisibility Cloak'), ('poison', 'Poison'), ('motion_sensor', 'Motion Sensor'), ('decoy', 'Decoy'), ('dogtag', 'Dogtag'), ('briefcase', 'Briefcase')], max_length=30)),
                ('position_lat', models.FloatField()),
                ('position_lng', models.FloatField()),
                ('deployed_at', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('player_joined', 'Player Joined'), ('player_left', 'Player Left'), ('game_started', 'Game Started'), ('player_moved', 'Player Moved'), ('item_picked', 'Item Picked'), ('item_used', 'Item Used'), ('task_started', 'Task Started'), ('task_progress', 'Task Progress'), ('task_completed', 'Task Completed'), ('task_failed', 'Task Failed'), ('player_killed', 'Player Killed'), ('player_revived', 'Player Revived'), ('game_ended', 'Game Ended'), ('motion_detected', 'Motion Detected'), ('explosion', 'Explosion'), ('item_respawn', 'Item Respawn')], max_length=30)),
                ('message', models.TextField()),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('team', 'Team'), ('private', 'Private')], default='public', max_length=20)),
                ('position_lat', models.FloatField(blank=True, null=True)),
                ('position_lng', models.FloatField(blank=True, null=True)),
                ('data', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['game', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(default=core.models.generate_game_code, max_length=6, unique=True)),
                ('status', models.CharField(choices=[('lobby', 'Lobby'), ('active', 'Active'), ('completed', 'Completed')], default='lobby', max_length=20)),
                ('home_base_lat', models.FloatField()),
                ('home_base_lng', models.FloatField()),
                ('map_radius', models.IntegerField(default=1000, help_text='Radius in meters from home base')),
                ('max_players', models.IntegerField(default=20)),
                ('game_duration', models.IntegerField(default=60, help_text='Duration in minutes')),
                ('red_team_ratio', models.FloatField(default=0.25, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(0.5)])),
                ('tasks_to_win', models.IntegerField(default=5)),
                ('failures_to_lose', models.IntegerField(default=2)),
                ('tasks_completed', models.IntegerField(default=0)),
                ('tasks_failed', models.IntegerField(default=0)),
                ('winner', models.CharField(blank=True, max_length=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ItemSpawn',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('item_type', models.CharField(choices=[('emp', 'EMP'), ('camera', 'Camera'), ('time_bomb', 'Time Bomb'), ('land_mine', 'Land Mine'), ('dagger', 'Dagger'), ('mask', 'Mask'), ('armor', 'Armor'), ('invisibility_cloak', 'Invisibility Cloak'), ('poison', 'Poison'), ('motion_sensor', 'Motion Sensor'), ('decoy', 'Decoy'), ('dogtag', 'Dogtag'), ('briefcase', 'Briefcase')], max_length=30)),
                ('position_lat', models.FloatField()),
                ('position_lng', models.FloatField()),
                ('pickup_radius', models.IntegerField(default=10, help_text='Pickup radius in meters')),
                ('available', models.BooleanField(default=True)),
                ('collected_at', models.DateTimeField(blank=True, null=True)),
                ('respawn_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='core.game')),
            ],
            options={
                'ordering': ['game', 'available', 'item_type'],
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('avatar_url', models.URLField(blank=True, null=True)),
                ('team', models.CharField(blank=True, choices=[('blue', 'Blue Team'), ('red', 'Red Team')], max_length=10, null=True)),
                ('is_alive', models.BooleanField(default=True)),
                ('is_online', models.BooleanField(default=True)),
                ('visibility', models.CharField(choices=[('active', 'Active'), ('recent', 'Recent'), ('dark', 'Dark')], default='active', max_length=20)),
                ('position_lat', models.FloatField(blank=True, null=True)),
                ('position_lng', models.FloatField(blank=True, null=True)),
                ('position_accuracy', models.FloatField(blank=True, null=True)),
                ('last_seen', models.DateTimeField(auto_now=True)),
                ('death_time', models.DateTimeField(blank=True, null=True)),
                ('death_position_lat', models.FloatField(blank=True, null=True)),
                ('death_position_lng', models.FloatField(blank=True, null=True)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='core.game')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['game', 'team', 'name'],
                'unique_together': {('game', 'name')},
            },
        ),
        migrations.CreateModel(
            name='PlayerInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picked_up_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='StatusEffect',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('poisoned', 'Poisoned'), ('masked', 'Masked'), ('invisible', 'Invisible')], max_length=20)),
                ('expires_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_effects', to='core.player')),
                ('source_player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inflicted_effects', to='core.player')),
            ],
            options={
                'ordering': ['player', 'expires_at'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('capture_intel', 'Capture Intel'), ('defuse_bomb', 'Defuse Bomb'), ('capture_objective', 'Capture Objective'), ('password_chain', 'Password Chain')], max_length=30)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('progress', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('failed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['game', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('home_base', 'Home Base'), ('task', 'Task Zone'), ('item_spawn', 'Item Spawn'), ('reviver', 'Reviver Zone'), ('emp_field', 'EMP Field')], max_length=20)),
                ('position_lat', models.FloatField()),
                ('position_lng', models.FloatField()),
                ('radius', models.IntegerField(help_text='Radius in meters')),
                ('active', models.BooleanField(default=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.player')),
            ],
            options={
                'ordering': ['game', 'type'],
            },
        ),
        migrations.DeleteModel(
            name='HitCounterModel',
        ),
        migrations.AddField(
            model_name='event',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='core.game'),
        ),
        migrations.AddField(
            model_name='deployeditem',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deployed_items', to='core.game'),
        ),
        migrations.AddField(
            model_name='itemspawn',
            name='collected_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collected_items', to='core.player'),
        ),
        migrations.AddField(
            model_name='itemspawn',
            name='dropped_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dropped_items', to='core.player'),
        ),
        migrations.AddField(
            model_name='game',
            name='host',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hosted_games', to='core.player'),
        ),
        migrations.AddField(
            model_name='event',
            name='player',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.player'),
        ),
        migrations.AddField(
            model_name='event',
            name='recipient_players',
            field=models.ManyToManyField(blank=True, related_name='private_events', to='core.player'),
        ),
        migrations.AddField(
            model_name='deployeditem',
            name='deployed_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deployed_items', to='core.player'),
        ),
        migrations.AddField(
            model_name='playerinventory',
            name='item',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.itemspawn'),
        ),
        migrations.AddField(
            model_name='playerinventory',
            name='player',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='core.player'),
        ),
        migrations.AddField(
            model_name='task',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='core.game'),
        ),
        migrations.AddField(
            model_name='task',
            name='participating_players',
            field=models.ManyToManyField(blank=True, related_name='tasks', to='core.player'),
        ),
        migrations.AddField(
            model_name='zone',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zones', to='core.game'),
        ),
        migrations.AddField(
            model_name='task',
            name='zones',
            field=models.ManyToManyField(related_name='tasks', to='core.zone'),
        ),
    ]
